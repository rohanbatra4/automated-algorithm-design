Tree,FP,FN,Num
"AdaBoostLearner(myProd(ARG0, 0), ModifyLearnerList(ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), [9, -2]), myFloatToInt(0.8141456048967308), myFloatDiv(0.1, 0.1))",0,68.4,30
"AdaBoostLearner(myProd(ARG0, 0), ModifyLearnerFloat(ModifyLearnerInt(learnerType('RandForest', {'n_estimators': 100, 'class_weight': 0, 'criterion': 0}), 3, 9), 100.0), myIntAdd(3, falseBool), myFloatDiv(0.1, 0.1))",0,68.4,69
"AdaBoostLearner(myProd(ARG0, 0), ModifyLearnerFloat(learnerType('ExtraTrees', {'n_estimators': 100, 'max_depth': 6, 'criterion': 0}), 0.01), myIntAdd(3, falseBool), myFloatDiv(0.1, 0.1))",0,68.4,31
"AdaBoostLearner(myProd(ARG0, 0), ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), myIntAdd(3, falseBool), myFloatDiv(0.1, 0.1))",0,68.4,29
"AdaBoostLearner(myProd(ARG0, 0), ModifyLearnerList(ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), [9, -2]), myIntAdd(255, trueBool), myFloatDiv(0.1, 0.1))",0,68.4,31
"AdaBoostLearner(myProd(ARG0, 0), ModifyLearnerFloat(learnerType('RandForest', {'n_estimators': 100, 'class_weight': 0, 'criterion': 0}), 0.01), myIntAdd(3, falseBool), myFloatDiv(0.1, 0.1))",0,68.4,29
"AdaBoostLearner(myProd(ARG0, 0), ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), myIntAdd(255, falseBool), myFloatDiv(0.1, 0.1))",0,68.4,29
"AdaBoostLearner(myProd(ARG0, 0), ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), myIntAdd(255, falseBool), 0.1)",0,68.4,27
"AdaBoostLearner(myProd(ARG0, 2), ModifyLearnerList(ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), [9, -2]), myIntAdd(255, trueBool), myFloatDiv(0.1, 0.1))",3.8,45.6,31
"AdaBoostLearner(ARG0, ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), myIntAdd(255, falseBool), myFloatDiv(0.1, 0.1))",3.8,45.6,27
"AdaBoostLearner(myProd(ARG0, 1), ModifyLearnerList(ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), [9, -2]), myIntAdd(255, trueBool), myFloatDiv(0.1, 0.1))",3.8,45.6,28
"myPlanckTaper(AdaBoostLearner(ToFloat(ARG0), ModifyLearnerInt(learnerType('SVM', {'C': 1.0, 'kernel': 0}), falseBool, 5), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(1)))",5,50.6,40
"myPlanckTaper(AdaBoostLearner(ToFloat(ARG0), ModifyLearnerInt(learnerType('SVM', {'C': 1.0, 'kernel': 0}), falseBool, 5), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(0)))",5,50.6,46
"AdaBoostLearner(myProd(ARG0, 2), ModifyLearnerList(ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), [9, -2]), 2, myFloatDiv(0.1, 0.1))",5.2,55,29
"AdaBoostLearner(myProd(ARG0, 2), ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), myIntAdd(3, falseBool), myFloatDiv(0.1, 0.1))",5.4,54.6,29
"AdaBoostLearner(myProd(ARG0, 1), ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), myIntAdd(3, falseBool), myFloatDiv(0.1, 0.1))",5.4,54.6,28
"AdaBoostLearner(ARG0, ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), myIntAdd(3, falseBool), myFloatDiv(0.1, 0.1))",5.4,54.6,29
"AdaBoostLearner(myProd(ARG0, 1), ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), myIntAdd(3, trueBool), myFloatDiv(0.1, 0.1))",5.4,54.8,28
"AdaBoostLearner(myProd(ARG0, 1), ModifyLearnerList(ModifyLearnerFloat(learnerType('LogR', {'penalty': 0, 'C': 1.0}), 0.01), [9, -2]), myFloatToInt(10.0), myFloatDiv(0.1, 0.1))",6,54.2,32
"myPlanckTaper(AdaBoostLearner(ToFloat(ARG0), ModifyLearnerInt(learnerType('Boosting', {'learning_rate': 0.1, 'n_estimators': 100, 'max_depth': 3}), falseBool, 5), passTriState(2), myIntToFloat(1)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(1)))",11.8,20.4,50
"BaggedLearner(ARG0, learnerType('Boosting', {'learning_rate': 0.1, 'n_estimators': 100, 'max_depth': 3}))",12,20.6,44
"BaggedLearner(ARG0, learnerType('RandForest', {'n_estimators': 100, 'class_weight': 0, 'criterion': 0}))",14.2,19.2,39
"myPlanckTaper(AdaBoostLearner(ToFloat(ARG0), ModifyLearnerInt(learnerType('RandForest', {'n_estimators': 100, 'class_weight': 0, 'criterion': 0}), falseBool, 5), passTriState(1), 0.1), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(0)))",15.2,18.6,39
"myPlanckTaper(AdaBoostLearner(ToFloat(ARG0), ModifyLearnerInt(learnerType('RandForest', {'n_estimators': 100, 'class_weight': 0, 'criterion': 0}), falseBool, 5), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(1)))",15.2,18.6,35
"myPlanckTaper(AdaBoostLearner(ARG0, ModifyLearnerInt(learnerType('RandForest', {'n_estimators': 100, 'class_weight': 0, 'criterion': 0}), falseBool, 5), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(1)))",15.2,18.6,29
"myPlanckTaper(AdaBoostLearner(ToFloat(ARG0), ModifyLearnerInt(learnerType('RandForest', {'n_estimators': 100, 'class_weight': 0, 'criterion': 0}), falseBool, 5), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(0)))",15.2,18.6,37
"myHamming(AdaBoostLearner(ToFloat(mySineMath(ARG0, 0)), ModifyLearnerInt(learnerType('RandForest', {'n_estimators': 100, 'class_weight': 0, 'criterion': 0}), falseBool, 5), passTriState(1), myIntToFloat(9)), passTriState(0), trueBool)",15.4,22.4,42
"AdaBoostLearner(myCumProd(ARG0, 2), ModifyLearnerList(learnerType('Trees', {'criterion': 0, 'splitter': 0}), [0, 2]), passInt(0), myFloatDiv(100.0, 10.0))",15.4,25.6,25
"AdaBoostLearner(myArcTangentMath(ARG0, 1), ModifyLearnerList(learnerType('Trees', {'criterion': 0, 'splitter': 0}), [1, -1]), passInt(0), myFloatDiv(100.0, 10.0))",15.4,25.6,26
"AdaBoostLearner(ARG0, ModifyLearnerList(learnerType('Trees', {'criterion': 0, 'splitter': 0}), [1, -1]), passInt(0), myFloatDiv(100.0, 10.0))",15.4,25.6,26
"AdaBoostLearner(myArcTangentMath(ARG0, 0), ModifyLearnerList(learnerType('Trees', {'criterion': 0, 'splitter': 0}), [-9, 2]), passInt(0), myFloatDiv(100.0, 10.0))",15.6,26.4,26
"AdaBoostLearner(myArcTangentMath(ARG0, passTriState(passTriState(0))), ModifyLearnerList(learnerType('Trees', {'criterion': 0, 'splitter': 0}), [1, -1]), passInt(0), myFloatDiv(100.0, 10.0))",15.6,26.4,31
"AdaBoostLearner(myArcTangentMath(ARG0, 0), ModifyLearnerList(learnerType('Trees', {'criterion': 0, 'splitter': 0}), [1, -1]), passInt(0), myFloatDiv(100.0, 10.0))",15.6,26.4,27
"BaggedLearner(ARG0, ModifyLearnerInt(learnerType('ExtraTrees', {'n_estimators': 100, 'max_depth': 6, 'criterion': 0}), 255, 6))",16,21,30
"BaggedLearner(ARG0, ModifyLearnerList(learnerType('Blup', None), [-4, 15]))",16,36.4,36
"BaggedLearner(ARG0, learnerType('Blup', None))",16,36.4,27
"BaggedLearner(bitAnd(ARG0, ARG0), ModifyLearnerList(learnerType('Blup', None), [15, 6]))",16,36.4,32
"BaggedLearner(ARG0, ModifyLearnerList(learnerType('Blup', None), [1, 11]))",16,36.4,30
"AdaBoostLearner(ARG0, learnerType('ExtraTrees', {'n_estimators': 100, 'max_depth': 6, 'criterion': 0}), 2, 0.01)",16.2,21.8,44
"AdaBoostLearner(myGaussian(ARG0, myFloatDiv(myFloatDiv(ifThenFloat(trueBool, 1.0), myFloatAdd(10.0, 0.01)), passFloat(myIntToFloat(150))), passTriState(1)), learnerType('ExtraTrees', {'n_estimators': 100, 'max_depth': 6, 'criterion': 0}), 2, 0.01)",16.2,21.8,63
"bitAnd(myICA(SingleLearner(ARG0, learnerType('SVM', {'C': 1.0, 'kernel': 0})), myIntAdd(4, 3), trueBool), ARG0)",16.2,21.8,31
"BaggedLearner(ARG0, ModifyLearnerBool(learnerType('SVM', {'C': 1.0, 'kernel': 0}), trueBool))",16.2,22,26
"myPlanckTaper(AdaBoostLearner(ToFloat(ARG0), ModifyLearnerInt(learnerType('Boosting', {'learning_rate': 0.1, 'n_estimators': 100, 'max_depth': 3}), falseBool, 5), passTriState(0), myIntToFloat(1)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(1)))",16.6,19.4,38
"myPlanckTaper(AdaBoostLearner(ToFloat(ARG0), ModifyLearnerInt(learnerType('RandForest', {'n_estimators': 100, 'class_weight': 0, 'criterion': 0}), falseBool, 128), passTriState(0), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(1)))",16.8,19.8,39
"myPlanckTaper(AdaBoostLearner(ToFloat(ARG0), ModifyLearnerInt(learnerType('RandForest', {'n_estimators': 100, 'class_weight': 0, 'criterion': 0}), falseBool, 5), passTriState(0), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(1)))",16.8,19.8,35
"myPlanckTaper(AdaBoostLearner(ARG0, ModifyLearnerInt(learnerType('Bayes', None), lessThan(0.01, 10.0), 5), passTriState(1), myIntToFloat(3)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(0)))",18.8,19,36
"bitAnd(myICA(SingleLearner(ARG0, learnerType('Bayes', None)), myIntAdd(4, 3), trueBool), ARG0)",18.8,19,28
"myPlanckTaper(AdaBoostLearner(myGaussian(ARG0, 100.0, 1), ModifyLearnerInt(learnerType('Bayes', None), greaterThanEqual(myFloatMult(0.01, -2.6522180585569863), myFloatDiv(0.1, 100.0)), 6), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(0)))",18.8,19,41
"myPlanckTaper(AdaBoostLearner(ARG0, ModifyLearnerInt(learnerType('Bayes', None), trueBool, 5), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(0)))",18.8,19,31
"myPlanckTaper(AdaBoostLearner(myGaussian(ARG0, 100.0, 1), ModifyLearnerInt(learnerType('Bayes', None), falseBool, 5), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(-3.6067369281004282, 0.1)), passTriState(passTriState(0)))",18.8,19,39
"myPlanckTaper(AdaBoostLearner(myGaussian(ARG0, 100.0, 1), ModifyLearnerInt(learnerType('Bayes', None), falseBool, 6), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(0)))",18.8,19,35
"myPlanckTaper(AdaBoostLearner(myGaussian(ARG0, 100.0, 1), ModifyLearnerInt(learnerType('Bayes', None), greaterThanEqual(-2.2512319566351326, 1.0), 5), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(0))),"18.8,19,46
"myPlanckTaper(AdaBoostLearner(myGaussian(ARG0, 100.0, 1), ModifyLearnerInt(learnerType('Bayes', None), falseBool, 5), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(0)))",18.8,19,35
"myPlanckTaper(AdaBoostLearner(ARG0, ModifyLearnerInt(learnerType('Bayes', None), lessThan(0.01, 10.0), 5), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(0)))",18.8,19,33
"BaggedLearner(ARG0, learnerType('Bayes', None))",18.8,19,45
"myPlanckTaper(AdaBoostLearner(myGaussian(ARG0, 100.0, 1), ModifyLearnerInt(learnerType('Bayes', None), falseBool, 3), passTriState(1), myIntToFloat(9)), passFloat(myFloatAdd(100.0, 0.1)), passTriState(passTriState(0)))",18.8,19,36
"AdaBoostLearner(myProd(ARG0, 1), ModifyLearnerList(ModifyLearnerFloat(learnerType('Bayes', None), 0.01), [9, -2]), myFloatToInt(10.0), myFloatDiv(0.1, 0.1))",56.4,28.2,30
"GridSearchLearner(ARG0, ModifyLearnerBool(ModifyLearnerInt(learnerType('OMP', None), 150, 1), greaterThan(0.1, 10.0)))",109.8,68.4,40